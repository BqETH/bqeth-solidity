/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type PuzzleStruct = {
  creator: AddressLike;
  t: BigNumberish;
  reward: BigNumberish;
  sdate: BigNumberish;
  h3: BytesLike;
  x: BytesLike;
};

export type PuzzleStructOutput = [
  creator: string,
  t: bigint,
  reward: bigint,
  sdate: bigint,
  h3: string,
  x: string
] & {
  creator: string;
  t: bigint;
  reward: bigint;
  sdate: bigint;
  h3: string;
  x: string;
};

export interface BqETHInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getActiveChain"
      | "getActivePolicy"
      | "getActivePuzzle"
      | "getPuzzle"
      | "getRewardPerDay"
      | "getSecondsPer32Exp"
      | "hasNoActivePuzzleForDelivery"
      | "hasNoActivePuzzleForPayload"
      | "puzzleKey"
      | "setRewardPerDay"
      | "setSecondsPer32Exp"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getActiveChain",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePolicy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePuzzle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPuzzle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardPerDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondsPer32Exp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasNoActivePuzzleForDelivery",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasNoActivePuzzleForPayload",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "puzzleKey",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPerDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecondsPer32Exp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getActiveChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivePuzzle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPuzzle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondsPer32Exp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasNoActivePuzzleForDelivery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasNoActivePuzzleForPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "puzzleKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecondsPer32Exp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export interface BqETH extends BaseContract {
  connect(runner?: ContractRunner | null): BqETH;
  waitForDeployment(): Promise<this>;

  interface: BqETHInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getActiveChain: TypedContractMethod<
    [_user: AddressLike],
    [PuzzleStructOutput[]],
    "view"
  >;

  getActivePolicy: TypedContractMethod<
    [_user: AddressLike],
    [[string, string, string] & { ritualId: string; mkh: string; dkh: string }],
    "view"
  >;

  getActivePuzzle: TypedContractMethod<
    [_user: AddressLike],
    [
      [bigint, string, string, string, bigint, string, bigint, bigint] & {
        pid: bigint;
        creator: string;
        N: string;
        x: string;
        t: bigint;
        h3: string;
        reward: bigint;
        sdate: bigint;
      }
    ],
    "view"
  >;

  getPuzzle: TypedContractMethod<
    [_pid: BigNumberish],
    [
      [bigint, string, string, string, bigint, string, bigint, bigint] & {
        pid: bigint;
        creator: string;
        N: string;
        x: string;
        t: bigint;
        h3: string;
        reward: bigint;
        sdate: bigint;
      }
    ],
    "view"
  >;

  getRewardPerDay: TypedContractMethod<[], [bigint], "view">;

  getSecondsPer32Exp: TypedContractMethod<[], [bigint], "view">;

  hasNoActivePuzzleForDelivery: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  hasNoActivePuzzleForPayload: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  puzzleKey: TypedContractMethod<
    [_N: BytesLike, _x: BytesLike, _t: BigNumberish],
    [bigint],
    "view"
  >;

  setRewardPerDay: TypedContractMethod<
    [gweiPerDay: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSecondsPer32Exp: TypedContractMethod<
    [secondsPer32Exp: BigNumberish],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getActiveChain"
  ): TypedContractMethod<[_user: AddressLike], [PuzzleStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getActivePolicy"
  ): TypedContractMethod<
    [_user: AddressLike],
    [[string, string, string] & { ritualId: string; mkh: string; dkh: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActivePuzzle"
  ): TypedContractMethod<
    [_user: AddressLike],
    [
      [bigint, string, string, string, bigint, string, bigint, bigint] & {
        pid: bigint;
        creator: string;
        N: string;
        x: string;
        t: bigint;
        h3: string;
        reward: bigint;
        sdate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPuzzle"
  ): TypedContractMethod<
    [_pid: BigNumberish],
    [
      [bigint, string, string, string, bigint, string, bigint, bigint] & {
        pid: bigint;
        creator: string;
        N: string;
        x: string;
        t: bigint;
        h3: string;
        reward: bigint;
        sdate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardPerDay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSecondsPer32Exp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasNoActivePuzzleForDelivery"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "hasNoActivePuzzleForPayload"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "puzzleKey"
  ): TypedContractMethod<
    [_N: BytesLike, _x: BytesLike, _t: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setRewardPerDay"
  ): TypedContractMethod<[gweiPerDay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSecondsPer32Exp"
  ): TypedContractMethod<[secondsPer32Exp: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
