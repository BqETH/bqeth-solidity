/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BqETHDecryptInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimDecryption"
      | "claimDecryptionReward"
      | "claimDecryptionRewardIPFS"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "decryptionRewardClaimed"): EventFragment;

  encodeFunctionData(
    functionFragment: "claimDecryption",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDecryptionReward",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDecryptionRewardIPFS",
    values: [BigNumberish, BytesLike[], boolean[], BytesLike, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDecryptionReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDecryptionRewardIPFS",
    data: BytesLike
  ): Result;
}

export namespace decryptionRewardClaimedEvent {
  export type InputTuple = [
    pid: BigNumberish,
    creator: AddressLike,
    decryptedMessage: string,
    keywords: string
  ];
  export type OutputTuple = [
    pid: bigint,
    creator: string,
    decryptedMessage: string,
    keywords: string
  ];
  export interface OutputObject {
    pid: bigint;
    creator: string;
    decryptedMessage: string;
    keywords: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BqETHDecrypt extends BaseContract {
  connect(runner?: ContractRunner | null): BqETHDecrypt;
  waitForDeployment(): Promise<this>;

  interface: BqETHDecryptInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimDecryption: TypedContractMethod<
    [_pid: BigNumberish, _h1: BytesLike, _x2: BytesLike],
    [bigint],
    "nonpayable"
  >;

  claimDecryptionReward: TypedContractMethod<
    [_pid: BigNumberish, _decryptedMessage: string, _keywords: string],
    [bigint],
    "nonpayable"
  >;

  claimDecryptionRewardIPFS: TypedContractMethod<
    [
      _pid: BigNumberish,
      proof: BytesLike[],
      proofPaths: boolean[],
      leaf: BytesLike,
      newcid: string,
      _keywords: string
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimDecryption"
  ): TypedContractMethod<
    [_pid: BigNumberish, _h1: BytesLike, _x2: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimDecryptionReward"
  ): TypedContractMethod<
    [_pid: BigNumberish, _decryptedMessage: string, _keywords: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimDecryptionRewardIPFS"
  ): TypedContractMethod<
    [
      _pid: BigNumberish,
      proof: BytesLike[],
      proofPaths: boolean[],
      leaf: BytesLike,
      newcid: string,
      _keywords: string
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "decryptionRewardClaimed"
  ): TypedContractEvent<
    decryptionRewardClaimedEvent.InputTuple,
    decryptionRewardClaimedEvent.OutputTuple,
    decryptionRewardClaimedEvent.OutputObject
  >;

  filters: {
    "decryptionRewardClaimed(uint256,address,string,string)": TypedContractEvent<
      decryptionRewardClaimedEvent.InputTuple,
      decryptionRewardClaimedEvent.OutputTuple,
      decryptionRewardClaimedEvent.OutputObject
    >;
    decryptionRewardClaimed: TypedContractEvent<
      decryptionRewardClaimedEvent.InputTuple,
      decryptionRewardClaimedEvent.OutputTuple,
      decryptionRewardClaimedEvent.OutputObject
    >;
  };
}
