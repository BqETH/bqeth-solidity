/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type ChainDataStruct = {
  t: BigNumberish;
  reward: BigNumberish;
  pid: BigNumberish;
  h3: BytesLike;
  x: BytesLike;
};

export type ChainDataStructOutput = [
  t: bigint,
  reward: bigint,
  pid: bigint,
  h3: string,
  x: string
] & { t: bigint; reward: bigint; pid: bigint; h3: string; x: string };

export type BqETHDataStruct = {
  passThrough: BigNumberish;
  servicesAmt: BigNumberish;
  notifications: string;
};

export type BqETHDataStructOutput = [
  passThrough: bigint,
  servicesAmt: bigint,
  notifications: string
] & { passThrough: bigint; servicesAmt: bigint; notifications: string };

export type PolicyDataStruct = { ritualId: string; whistleBlower: boolean };

export type PolicyDataStructOutput = [
  ritualId: string,
  whistleBlower: boolean
] & { ritualId: string; whistleBlower: boolean };

export type PayloadDataStruct = {
  encryptedPayload: string;
  encryptedDelivery: string;
  mkh: BytesLike;
  mtroot: BytesLike;
  kwh: BytesLike;
  dkh: BytesLike;
};

export type PayloadDataStructOutput = [
  encryptedPayload: string,
  encryptedDelivery: string,
  mkh: string,
  mtroot: string,
  kwh: string,
  dkh: string
] & {
  encryptedPayload: string;
  encryptedDelivery: string;
  mkh: string;
  mtroot: string;
  kwh: string;
  dkh: string;
};

export interface BqETHPublishInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelEverything"
      | "registerFlippedPuzzle"
      | "registerPuzzleChain"
      | "replaceMessageKit"
      | "replaceNotification"
      | "setWhistleBlower"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CancellationNotification"
      | "NewNotificationSet"
      | "NewPolicyRegistered"
      | "NewPuzzleRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelEverything",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerFlippedPuzzle",
    values: [BytesLike, ChainDataStruct[], BigNumberish, BqETHDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPuzzleChain",
    values: [
      BytesLike,
      ChainDataStruct[],
      BigNumberish,
      PolicyDataStruct,
      PayloadDataStruct,
      BqETHDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceMessageKit",
    values: [PayloadDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceNotification",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhistleBlower",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelEverything",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerFlippedPuzzle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPuzzleChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceMessageKit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceNotification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhistleBlower",
    data: BytesLike
  ): Result;
}

export namespace CancellationNotificationEvent {
  export type InputTuple = [sender: AddressLike, times: BigNumberish[]];
  export type OutputTuple = [sender: string, times: bigint[]];
  export interface OutputObject {
    sender: string;
    times: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewNotificationSetEvent {
  export type InputTuple = [sender: AddressLike, notifications: string];
  export type OutputTuple = [sender: string, notifications: string];
  export interface OutputObject {
    sender: string;
    notifications: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPolicyRegisteredEvent {
  export type InputTuple = [ritualId: string];
  export type OutputTuple = [ritualId: string];
  export interface OutputObject {
    ritualId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPuzzleRegisteredEvent {
  export type InputTuple = [
    sender: AddressLike,
    pid: BigNumberish,
    ready: boolean
  ];
  export type OutputTuple = [sender: string, pid: bigint, ready: boolean];
  export interface OutputObject {
    sender: string;
    pid: bigint;
    ready: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BqETHPublish extends BaseContract {
  connect(runner?: ContractRunner | null): BqETHPublish;
  waitForDeployment(): Promise<this>;

  interface: BqETHPublishInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelEverything: TypedContractMethod<[], [void], "nonpayable">;

  registerFlippedPuzzle: TypedContractMethod<
    [
      _N: BytesLike,
      _c: ChainDataStruct[],
      _sdate: BigNumberish,
      _bqethData: BqETHDataStruct
    ],
    [bigint],
    "payable"
  >;

  registerPuzzleChain: TypedContractMethod<
    [
      _N: BytesLike,
      _c: ChainDataStruct[],
      _sdate: BigNumberish,
      _policy: PolicyDataStruct,
      _payload: PayloadDataStruct,
      _bqethData: BqETHDataStruct
    ],
    [bigint],
    "payable"
  >;

  replaceMessageKit: TypedContractMethod<
    [_payload: PayloadDataStruct],
    [void],
    "nonpayable"
  >;

  replaceNotification: TypedContractMethod<
    [_notification: string],
    [void],
    "nonpayable"
  >;

  setWhistleBlower: TypedContractMethod<
    [user: AddressLike, wb: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelEverything"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerFlippedPuzzle"
  ): TypedContractMethod<
    [
      _N: BytesLike,
      _c: ChainDataStruct[],
      _sdate: BigNumberish,
      _bqethData: BqETHDataStruct
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registerPuzzleChain"
  ): TypedContractMethod<
    [
      _N: BytesLike,
      _c: ChainDataStruct[],
      _sdate: BigNumberish,
      _policy: PolicyDataStruct,
      _payload: PayloadDataStruct,
      _bqethData: BqETHDataStruct
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "replaceMessageKit"
  ): TypedContractMethod<[_payload: PayloadDataStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "replaceNotification"
  ): TypedContractMethod<[_notification: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhistleBlower"
  ): TypedContractMethod<
    [user: AddressLike, wb: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CancellationNotification"
  ): TypedContractEvent<
    CancellationNotificationEvent.InputTuple,
    CancellationNotificationEvent.OutputTuple,
    CancellationNotificationEvent.OutputObject
  >;
  getEvent(
    key: "NewNotificationSet"
  ): TypedContractEvent<
    NewNotificationSetEvent.InputTuple,
    NewNotificationSetEvent.OutputTuple,
    NewNotificationSetEvent.OutputObject
  >;
  getEvent(
    key: "NewPolicyRegistered"
  ): TypedContractEvent<
    NewPolicyRegisteredEvent.InputTuple,
    NewPolicyRegisteredEvent.OutputTuple,
    NewPolicyRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "NewPuzzleRegistered"
  ): TypedContractEvent<
    NewPuzzleRegisteredEvent.InputTuple,
    NewPuzzleRegisteredEvent.OutputTuple,
    NewPuzzleRegisteredEvent.OutputObject
  >;

  filters: {
    "CancellationNotification(address,uint128[])": TypedContractEvent<
      CancellationNotificationEvent.InputTuple,
      CancellationNotificationEvent.OutputTuple,
      CancellationNotificationEvent.OutputObject
    >;
    CancellationNotification: TypedContractEvent<
      CancellationNotificationEvent.InputTuple,
      CancellationNotificationEvent.OutputTuple,
      CancellationNotificationEvent.OutputObject
    >;

    "NewNotificationSet(address,string)": TypedContractEvent<
      NewNotificationSetEvent.InputTuple,
      NewNotificationSetEvent.OutputTuple,
      NewNotificationSetEvent.OutputObject
    >;
    NewNotificationSet: TypedContractEvent<
      NewNotificationSetEvent.InputTuple,
      NewNotificationSetEvent.OutputTuple,
      NewNotificationSetEvent.OutputObject
    >;

    "NewPolicyRegistered(string)": TypedContractEvent<
      NewPolicyRegisteredEvent.InputTuple,
      NewPolicyRegisteredEvent.OutputTuple,
      NewPolicyRegisteredEvent.OutputObject
    >;
    NewPolicyRegistered: TypedContractEvent<
      NewPolicyRegisteredEvent.InputTuple,
      NewPolicyRegisteredEvent.OutputTuple,
      NewPolicyRegisteredEvent.OutputObject
    >;

    "NewPuzzleRegistered(address,uint256,bool)": TypedContractEvent<
      NewPuzzleRegisteredEvent.InputTuple,
      NewPuzzleRegisteredEvent.OutputTuple,
      NewPuzzleRegisteredEvent.OutputObject
    >;
    NewPuzzleRegistered: TypedContractEvent<
      NewPuzzleRegisteredEvent.InputTuple,
      NewPuzzleRegisteredEvent.OutputTuple,
      NewPuzzleRegisteredEvent.OutputObject
    >;
  };
}
