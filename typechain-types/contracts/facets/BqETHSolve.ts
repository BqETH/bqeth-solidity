/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BqETHSolveInterface extends Interface {
  getFunction(
    nameOrSignature: "claimPuzzle" | "claimReward" | "log2"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;

  encodeFunctionData(
    functionFragment: "claimPuzzle",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "log2", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "claimPuzzle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "log2", data: BytesLike): Result;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    pid: BigNumberish,
    y: BytesLike,
    sdate: BigNumberish,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    pid: bigint,
    y: string,
    sdate: bigint,
    reward: bigint
  ];
  export interface OutputObject {
    pid: bigint;
    y: string;
    sdate: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BqETHSolve extends BaseContract {
  connect(runner?: ContractRunner | null): BqETHSolve;
  waitForDeployment(): Promise<this>;

  interface: BqETHSolveInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimPuzzle: TypedContractMethod<
    [_pid: BigNumberish, _h1: BytesLike, _x2: BytesLike],
    [bigint],
    "nonpayable"
  >;

  claimReward: TypedContractMethod<
    [_pid: BigNumberish, _y: BytesLike, _proof: BytesLike[]],
    [bigint],
    "nonpayable"
  >;

  log2: TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimPuzzle"
  ): TypedContractMethod<
    [_pid: BigNumberish, _h1: BytesLike, _x2: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<
    [_pid: BigNumberish, _y: BytesLike, _proof: BytesLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "log2"
  ): TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;

  filters: {
    "RewardClaimed(uint256,bytes,uint256,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
  };
}
