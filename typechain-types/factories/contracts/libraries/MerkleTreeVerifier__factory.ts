/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MerkleTreeVerifier,
  MerkleTreeVerifierInterface,
} from "../../../contracts/libraries/MerkleTreeVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "bool[]",
        name: "paths",
        type: "bool[]",
      },
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
    ],
    name: "_verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610649610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80635218f9b31461003a575b600080fd5b610054600480360381019061004f91906103ee565b61006a565b604051610061919061049c565b60405180910390f35b600082610078868685610083565b149050949350505050565b60008082905060005b85518110156101065760008682815181106100aa576100a96104b7565b5b602002602001015190508582815181106100c7576100c66104b7565b5b6020026020010151156100e5576100de8184610112565b92506100f2565b6100ef8382610112565b92505b5080806100fe9061051f565b91505061008c565b50809150509392505050565b600080600160f81b9050808484604051602001610131939291906105d6565b6040516020818303038152906040528051906020012091505092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101b282610169565b810181811067ffffffffffffffff821117156101d1576101d061017a565b5b80604052505050565b60006101e4610150565b90506101f082826101a9565b919050565b600067ffffffffffffffff8211156102105761020f61017a565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61023981610226565b811461024457600080fd5b50565b60008135905061025681610230565b92915050565b600061026f61026a846101f5565b6101da565b9050808382526020820190506020840283018581111561029257610291610221565b5b835b818110156102bb57806102a78882610247565b845260208401935050602081019050610294565b5050509392505050565b600082601f8301126102da576102d9610164565b5b81356102ea84826020860161025c565b91505092915050565b600067ffffffffffffffff82111561030e5761030d61017a565b5b602082029050602081019050919050565b60008115159050919050565b6103348161031f565b811461033f57600080fd5b50565b6000813590506103518161032b565b92915050565b600061036a610365846102f3565b6101da565b9050808382526020820190506020840283018581111561038d5761038c610221565b5b835b818110156103b657806103a28882610342565b84526020840193505060208101905061038f565b5050509392505050565b600082601f8301126103d5576103d4610164565b5b81356103e5848260208601610357565b91505092915050565b600080600080608085870312156104085761040761015a565b5b600085013567ffffffffffffffff8111156104265761042561015f565b5b610432878288016102c5565b945050602085013567ffffffffffffffff8111156104535761045261015f565b5b61045f878288016103c0565b935050604061047087828801610247565b925050606061048187828801610247565b91505092959194509250565b6104968161031f565b82525050565b60006020820190506104b1600083018461048d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600061052a82610515565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561055d5761055c6104e6565b5b600182019050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6105af6105aa82610568565b610594565b82525050565b6000819050919050565b6105d06105cb82610226565b6105b5565b82525050565b60006105e2828661059e565b6001820191506105f282856105bf565b60208201915061060282846105bf565b60208201915081905094935050505056fea264697066735822122024efc10a3861cef66938819d5e5fcdce8861276d53c4cd053fff449d236d527a64736f6c634300080a0033";

type MerkleTreeVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleTreeVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleTreeVerifier__factory extends ContractFactory {
  constructor(...args: MerkleTreeVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MerkleTreeVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MerkleTreeVerifier__factory {
    return super.connect(runner) as MerkleTreeVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeVerifierInterface {
    return new Interface(_abi) as MerkleTreeVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MerkleTreeVerifier {
    return new Contract(address, _abi, runner) as unknown as MerkleTreeVerifier;
  }
}
